#!/bin/sh
# vim: set ai ts=2 et sw=2 tw=80:

# MIT License
#
# Copyright (c) 2022 Will Eccles
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

phi() {
  >&2 printf "\033[33;1m-> \033[35;1m%s | %s\033[m %s\n" "$1" "$2" "$3"
}

usage() {
  >&2 echo "cpm [i|r|l|C|u|U|s|S|I|F|f|c|h] [pkg]..."
  phi i  "install" "install one or more packages"
  phi r  "remove " "remove one or more packages"
  phi l  "list   " "list installed packages"
  phi C  "count  " "count installed packages"
  phi u  "update " "update package lists"
  phi U  "upgrade" "update package lists and upgrade all packages"
  phi s  "search " "search for a package"
  phi S  "show   " "show information about a package"
  phi I  "info   " "same as show"
  phi F  "files  " "show file list of package"
  phi f  "from   " "show package which owns a file"
  phi c  "clean  " "clean up leftover files/caches/orphans"
  phi h  "help   " "show this message"
}

pem() {
  >&2 printf "\033[31;1merror:\033[m %s\n" "$1"
}

case "$1" in
  i|install)
    OP='install'
    if [ $# -lt 2 ]; then
      pem "$OP: no package(s) specified"
      exit 1
    fi
    ;;
  r|remove)
    OP='remove'
    if [ $# -lt 2 ]; then
      pem "$OP: no package(s) specified"
      exit 1
    fi
    ;;
  l|list)
    OP='list'
    ;;
  C|count)
    OP='count'
    ;;
  u|update)
    OP='update'
    ;;
  U|upgrade)
    OP='upgrade'
    ;;
  s|search)
    OP='search'
    if [ $# -lt 2 ]; then
      pem "$OP: please specify a package"
      exit 1
    fi
    ;;
  S|show|I|info)
    OP='show'
    if [ $# -lt 2 ]; then
      pem "$OP: please specify a package"
      exit 1
    fi
    ;;
  F|files)
    OP='files'
    ;;
  f|from)
    OP='from'
    ;;
  c|clean)
    OP='clean'
    ;;
  h|help)
    usage
    exit 0
    ;;
  "")
    usage
    exit 1
    ;;
  *)
    pem "Unrecognized operation: $1"
    usage
    exit 1
    ;;
esac
shift

# pipe to this to get a count instead of relying on wc -l
tot() {
  i=0
  while read -r line; do
    i=$((i + 1))
  done
  printf '%s\n' "$i"
}

# count the files in a directory (similar to ls -l | wc -l) or something
# usage: fcount /path/to/dir/*
fcount() {
  if [ -e "$1" ]; then
    printf '%s\n' "$#"
  else
    printf '%s\n' 0
  fi
}

# list files in a directory (similar to ls -l)
flist() {
  if [ -d "$1" ]; then
    cd "$1" && printf '%s\n' *
  fi
}

# replacement for command -v which ignores aliases
# this is useful for me, don't ask why
has() {
  case "$(command -v "$1" 2>/dev/null)" in
    alias*|"") return 1
  esac
}

# resolve symlinks in path to file (may or may not work for a directory, but
# I doubt there's a need for that anyway)
resolve() {
  p="${1%/*}"
  [ "$p" = "$1" ] && p="."
  cd -P "$p" 2>/dev/null || PWD="$p"
  printf '%s\n' "${PWD}/${1##*/}"
}

# figure out which sudo command to use
# this is somewhat based on how xtools does it (for xi, specifically)
SUDO=
if command -v sudo >/dev/null; then
  SUDO=sudo
elif command -v doas >/dev/null && [ -f /etc/doas.conf ]; then
  SUDO=doas
elif [ "$(whoami)" != root ]; then
  SUDO='su root -c '\''"$@"'\'' -- -'
fi

# mainly for slackware: list lines after string $3 in directory $2, file $1
# usage: filelistftr pkgname /directory/example "String to look for"
# usage: filelistftr FILE [DIR] [STR]

filelistftr() {
  file="${1}"
  dir="${2:-/var/log/packages}"
  str="${3:-"FILE LIST:"}"
  pkginfo="$dir/$file"
  if [ -f "$pkginfo" ]; then
    unset found
    while IFS= read -r line; do
      [ "$line" = "$str" ] && found=1
      [ "$found" ] && printf "%s\n" "$line"
    done <"$pkginfo"
  elif [ -d "$dir" ]; then
    pem "Not in $dir, check input or try updating."
  else
    pem "$dir does not exist, are you using the right PM?"
  fi
}


_apk() {
  case "$OP" in
    install) $SUDO apk add "$@";;
    remove)  $SUDO apk del "$@";;
    list)    apk -vv info;;
    count)   apk -vv info | tot;;
    update)  $SUDO apk update;;
    upgrade) $SUDO apk update && $SUDO apk upgrade;;
    search)  apk search -v "$@";;
    show)    apk search "$@";;
    from)    apk info --who-owns "$@";;
    files)   apk info -L "$@";;
    clean)   $SUDO apk cache clean;;
  esac
}

_apt() {
  case "$OP" in
    install) $SUDO apt install "$@";;
    remove)  $SUDO apt remove "$@";;
    list)    apt list --installed;;
    count)   dpkg-query -f '.\n' -W | tot;;
    update)  $SUDO apt update;;
    upgrade) $SUDO apt update && $SUDO apt dist-upgrade;;
    search)  apt search "$@";;
    show)    apt show "$@";;
    files)   dpkg -L "$@";;
    from)    dpkg -S "$@";;
    clean)   $SUDO apt autoremove;;
  esac
}

_portage() {
  case "$OP" in
    install) $SUDO emerge -atv "$@";;
    remove)  $SUDO emerge -avc "$@";;
    list)    qlist -IRv;;
    count)   eix --world | tot;;
    update)  $SUDO emerge --sync;;
    upgrade)
      $SUDO emerge --sync && \
        $SUDO emerge -uDU --keep-going --with-bdeps=y @world
      ;;
    search)  emerge -s "$@";;
    show)    emerge -s "$@";;
    files)   qlist "$@";;
    from)    qfile "$@";;
    clean)   $SUDO emerge --depclean -v;;
  esac
}

_dnf() {
  case "$OP" in
    install) $SUDO dnf install "$@";;
    remove)  $SUDO dnf remove "$@";;
    list)    dnf list --installed;;
    count)   rpm -qa | tot;;
    update)  $SUDO dnf check-update;;
    upgrade) $SUDO dnf check-update && $SUDO dnf distro-sync;;
    search)  dnf search "$@";;
    show)    dnf info "$@";;
    files)   dnf repoquery -l "$@";;
    from)    dnf provides "$@";;
    clean)   $SUDO dnf autoremove;;
  esac
}

_pacman() {
  case "$OP" in
    install) $SUDO pacman -S "$@";;
    remove)  $SUDO pacman -Rs "$@";;
    list)    pacman -Q;;
    count)   pacman -Q | tot;;
    update)  $SUDO pacman -Sy;;
    upgrade) $SUDO pacman -Syu;;
    search)  pacman -Ss "$@";;
    show)    pacman -Si "$@";;
    files)   pacman -Ql "$@";;
    from)    pacman -Qo "$@";;
    clean)   $SUDO pacman -Rns $(pacman -Qtdq) && $SUDO pacman -Sc;;
  esac
}

_urpmi() {
  case "$OP" in
    install) $SUDO urpmi "$@";;
    remove)  $SUDO urpme "$@";;
    list)    rpm -qa;;
    count)   rpm -qa | tot;;
    update)  $SUDO urpmi.update -a;;
    upgrade) $SUDO urpmi.update -a && $SUDO urpmi --auto-update;;
    search)  urpmq -Y "$@";;
    show)    urpmq --summary "$@";;
    files)   rpm -ql "$@";;
    from)    rpm -qf "$@";;
    clean)   $SUDO urpme --auto-orphans;;
  esac
}

_macports() {
  case "$OP" in
    install) $SUDO port install -c "$@";;
    remove)  $SUDO port uninstall --follow-dependencies "$@";;
    list)    port installed;;
    count)   port installed | tot;;
    update)  $SUDO port sync;;
    upgrade)
      $SUDO port sync && $SUDO port selfupdate && $SUDO port upgrade outdated
      ;;
    search)  port search "$@";;
    show)    port info "$@";;
    files)   port contents "$@";;
    from)    port provides "$@";;
    clean)   $SUDO port reclaim;;
  esac
}

_xbps() {
  case "$OP" in
    install) $SUDO xbps-install "$@";;
    remove)  $SUDO xbps-remove -R "$@";;
    list)    xbps-query -l;;
    count)   xbps-query -l | tot;;
    update)  $SUDO xbps-install -S;;
    upgrade) $SUDO xbps-install -Su xbps && $SUDO xbps-install -u;;
    search)  xbps-query -s "$@" --repository;;
    show)    xbps-query -S "$@" --repository;;
    files)   xbps-query -f "$1" --repository;;
    from)    xbps-query -o "$(resolve "$1")";;
    clean)   $SUDO xbps-remove -ROo;;
  esac
}

_slackpkg() {
  case "$OP" in
    install) $SUDO slackpkg install "$@";;
    remove)  $SUDO slackpkg remove "$@";;
    list)    flist /var/log/packages;;
    count)   fcount /var/log/packages/*;;
    update)  $SUDO slackpkg update gpg && $SUDO slackpkg update;;
    upgrade)
      $SUDO slackpkg update gpg && $SUDO slackpkg update && \
        $SUDO slackpkg upgrade-all
      ;;
    search)  slackpkg search "$@";;
    show)    slackpkg info "$@";;
    from)    slackpkg file-search "$@";;
    files)   filelistftr "$1";;
    clean)   $SUDO slackpkg clean-system;;
  esac
}

_zypper() {
  case "$OP" in
    install) $SUDO zypper install "$@";;
    remove)  $SUDO zypper remove -u "$@";;
    list)    rpm -qa;;
    count)   rpm -qa | tot;;
    update)  $SUDO zypper refresh;;
    upgrade) $SUDO zypper refresh && $SUDO zypper update;;
    search)  zypper search "$@";;
    show)    zypper info "$@";;
    files)   rpm -ql "$@";;
    from)    zypper search -f "$@";;
    clean)   pem "unsupported: this feature is functionally useless in this PM";;
  esac
}

_sorcery() {
  case "$OP" in
    install) $SUDO cast "$@";;
    remove)  $SUDO dispell "$@";;
    list)    gaze installed;;
    count)   gaze installed | tot;;
    update)  $SUDO sorcery -u;;
    upgrade) $SUDO sorcery -ug;;
    search)  gaze search "$@";;
    show)    gaze what "$@";;
    files)   gaze tablet spell-files "$@";;
    from)    gaze from "$@";;
    clean)   pem "unsupported: this feature is functionally useless in this PM";;
  esac
}

_lunar() {
  case "$OP" in
    install) $SUDO lunar install "$@";;
    remove)  $SUDO lunar remove "$@";;
    list)    lvu installed;;
    count)   lvu installed | tot;;
    update)  $SUDO lunar renew;;
    upgrade) $SUDO lunar renew && $SUDO lunar update;;
    search)  lvu search "$@";;
    show)    lvu what "$@";;
    files)   lvu where "$@";;
    from)    lvu from "$@";;
    clean)   $SUDO lunar prune;;
  esac
}

_prt_get() {
  case "$OP" in
    install) $SUDO prt-get install "$@";;
    remove)  $SUDO prt-get remove "$@";;
    list)    prt-get listinst;;
    count)   prt-get listinst | tot;;
    update)  $SUDO ports -u;;
    upgrade) $SUDO ports -u && $SUDO prt-get sysup;;
    search)  prt-get search "$@";;
    show)    prt-get info "$@";;
    files)   prt-get ls "$@";;
    from)    prt-get fsearch "$@";;
    clean)   $SUDO prt-get cache && pkgfoster;;
  esac
}

_guix() {
  case "$OP" in
    install) guix package --install "$@";;
    remove)  guix package --remove "$@";;
    list)    guix package --list-installed;;
    count)   guix package --list-installed | tot;;
    update)  guix pull;;
    upgrade) guix pull && guix upgrade --keep-going;;
    search)  guix search "$@";;
    show)    guix show "$@";;
    f*)      pem "unsupported: this feature is functionally useless in this PM";;
    clean)   guix gc --delete-generations;;
  esac
}

# Use pm=PKG_MANAGER cpm COMMAND to force a specific cpm function
# ie.: pm=portage cpm list
if [ "$pm" ] && has "_$pm"; then
  "_$pm" "$@"
elif ! [ "$(uname -s)" = "Darwin" ]; then
  if has apk; then
    # alpine/adelie
    _apk "$@"
  elif has apt; then
    # debian/ubuntu
    _apt "$@"
  elif has emerge; then
    # gentoo
    _portage "$@"
  elif has dnf; then
    # fedora
    _dnf "$@"
  elif has pacman-key; then
    # arch/manjaro
    _pacman "$@"
  elif has urpmi; then
    # mageia
    _urpmi "$@"
  elif has xbps-install; then
    # void
    _xbps "$@"
  elif has slackpkg; then
    # slackware
    _slackpkg "$@"
  elif has zypper; then
    # opensuse
    _zypper "$@"
  elif has sorcery; then
    # source mage
    _sorcery "$@"
  elif has lunar; then
    # lunar
    _lunar "$@"
  elif has prt-get; then
    # crux
    _prt_get "$@"
  elif has guix; then
    # local (non-system-wide) guix
    _guix "$@"
  elif has snap; then
    pem "Snapd is not supported [wontfix]"
    exit 1
  else
    pem "No valid package manager detected."
    exit 1
  fi
else
  if has port; then
    _macports "$@"
  elif has brew; then
    pem "Homebrew is not supported [wontfix]"
    exit 1
  else
    pem "No valid package manager detected."
    exit 1
  fi
fi
